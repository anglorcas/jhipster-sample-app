name: Application CI

on: [push, pull_request]

jobs:
  pipeline:
    name: jhipsterSampleApplication pipeline
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
    timeout-minutes: 40
    env:
      NODE_VERSION: 20.15.0
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
      GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
      PUSHGATEWAY_URL: http://localhost:9091 # Default value

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 20.15.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Install ngrok
      - name: Install ngrok
        run: |
          curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o ngrok.zip
          unzip ngrok.zip
          sudo mv ngrok /usr/local/bin
          rm ngrok.zip

      # Start Pushgateway and ngrok
      - name: Start Pushgateway and ngrok
        run: |
          # Start Pushgateway using Docker
          docker run -d -p 9091:9091 prom/pushgateway

          # Start ngrok to forward port 9091 (Pushgateway)
          nohup ngrok http 9091 > ngrok.log &

          # Wait for ngrok to start and then get the public URL
          sleep 5

          # Get the ngrok public URL, and handle errors if it fails
          NGROK_URL=$(curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')

          # If ngrok fails, use the default value (localhost:9091)
          if [ -z "$NGROK_URL" ]; then
            echo "Ngrok URL not found, using default localhost:9091"
            NGROK_URL="http://localhost:9091"
          fi

          # Update the PUSHGATEWAY_URL to the ngrok public URL
          echo "PUSHGATEWAY_URL=$NGROK_URL" >> $GITHUB_ENV

      # Run backend tests
      - name: Run backend tests
        id: backend_tests
        run: |
          chmod +x mvnw
          npm run ci:backend:test > backend-test-output.log || true

      # Run frontend tests
      - name: Run frontend tests
        id: frontend_tests
        run: |
          npm run ci:frontend:test > frontend-test-output.log || true

      # Extract test metrics and push to Pushgateway
      - name: Extract test metrics and push to Pushgateway
        run: |
          # Parse backend test results
          BACKEND_TESTS_RUN=$(grep -oP '(?<=Tests run: )\d+' backend-test-output.log || echo 0)
          BACKEND_TESTS_FAILED=$(grep -oP '(?<=Failures: )\d+' backend-test-output.log || echo 0)
          BACKEND_TESTS_SUCCEEDED=$((BACKEND_TESTS_RUN - BACKEND_TESTS_FAILED))

          # Parse frontend test results
          FRONTEND_TESTS_RUN=$(grep -oP '(?<=Tests run: )\d+' frontend-test-output.log || echo 0)
          FRONTEND_TESTS_FAILED=$(grep -oP '(?<=Failures: )\d+' frontend-test-output.log || echo 0)
          FRONTEND_TESTS_SUCCEEDED=$((FRONTEND_TESTS_RUN - FRONTEND_TESTS_FAILED))

          # Combine totals
          TOTAL_TESTS_RUN=$((BACKEND_TESTS_RUN + FRONTEND_TESTS_RUN))
          TOTAL_TESTS_FAILED=$((BACKEND_TESTS_FAILED + FRONTEND_TESTS_FAILED))
          TOTAL_TESTS_SUCCEEDED=$((TOTAL_TESTS_RUN - TOTAL_TESTS_FAILED))

          # Create metrics file
          echo "tests_run_total $TOTAL_TESTS_RUN" > metrics.prom
          echo "tests_failed_total $TOTAL_TESTS_FAILED" >> metrics.prom
          echo "tests_succeeded_total $TOTAL_TESTS_SUCCEEDED" >> metrics.prom

          # Push metrics to Prometheus Pushgateway
          curl --data-binary @metrics.prom ${PUSHGATEWAY_URL}/metrics/job/github_actions

      # Package application
      - name: Package application
        run: npm run java:jar:prod

      # E2E Tests
      - name: 'E2E: Package'
        run: npm run ci:e2e:package
      - name: 'E2E: Prepare'
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        run: npm run ci:e2e:run
      - name: 'E2E: Teardown'
        run: npm run ci:e2e:teardown

      # Stop services
      - name: Stop services
        run: |
          docker-compose -f docker-compose.yml down
          pkill ngrok
