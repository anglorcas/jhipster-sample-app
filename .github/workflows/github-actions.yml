name: Application CI

on: [push, pull_request]

jobs:
  pipeline:
    name: jhipsterSampleApplication pipeline
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
    timeout-minutes: 40
    env:
      NODE_VERSION: 20.15.0
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
      GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
      PUSHGATEWAY_URL: https://profound-abnormally-monkfish.ngrok-free.app/ # Static ngrok URL

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 20.15.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Install node.js packages
        run: npm install
      - name: Start services for metrics collection
        run: |
          docker-compose -f docker-compose.yml up -d
      - name: Run backend test
        id: backend_test
        run: |
          chmod +x mvnw
          npm run ci:backend:test
        continue-on-error: true # Continue even if tests fail
      - name: Run frontend test
        id: frontend_test
        run: |
          npm run ci:frontend:test
        continue-on-error: true # Continue even if tests fail
      - name: Collect Test Metrics
        run: |
          # Capture test results based on test outcomes
          BACKEND_TESTS_FAILED=${{ steps.backend_test.outcome == 'failure' && 1 || 0 }}
          FRONTEND_TESTS_FAILED=${{ steps.frontend_test.outcome == 'failure' && 1 || 0 }}

          # Calculate the total tests, failed, and succeeded
          TOTAL_TESTS=481  # 401 tests passed + 80 test suites (total)
          TOTAL_FAILED=$((BACKEND_TESTS_FAILED + FRONTEND_TESTS_FAILED))
          TOTAL_SUCCEEDED=$((TOTAL_TESTS - TOTAL_FAILED))

          # Check if metrics.prom exists; if not, create it
          echo "Creating or updating metrics.prom with the collected metrics..."

          # Create or overwrite the metrics.prom file
          echo "tests_failed $TOTAL_FAILED" > metrics.prom
          echo "tests_succeeded $TOTAL_SUCCEEDED" >> metrics.prom

          # Optionally print the content for debugging
          cat metrics.prom
      - name: Push Test Metrics to Prometheus Pushgateway
        run: |
          # Push the metrics to the Pushgateway
          curl --data-binary @metrics.prom ${PUSHGATEWAY_URL}/metrics/job/github_actions
          echo "chapter_12_metric $(date +%s)" | curl --data-binary @- ${PUSHGATEWAY_URL}/metrics/job/chapter9
      - name: Package application
        run: npm run java:jar:prod
      - name: 'E2E: Package'
        run: npm run ci:e2e:package
      - name: 'E2E: Prepare'
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        run: npm run ci:e2e:run
      - name: 'E2E: Teardown'
        run: npm run ci:e2e:teardown
      - name: Stop services
        run: |
          docker-compose -f docker-compose.yml down
